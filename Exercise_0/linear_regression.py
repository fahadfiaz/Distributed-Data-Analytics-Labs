import numpy as np
import matplotlib.pyplot as plt


def generate_dataset(mu, shape, *sigmas):
    A, B, C = np.random.normal(mu, sigmas[0], shape), \
              np.random.normal(mu, sigmas[1], shape), \
              np.random.normal(mu, sigmas[2], shape)
    return A, B, C


def learn_simple_line_regression(matrix):
    x_mean = np.mean(matrix, axis=0)[0]
    y_mean = np.mean(matrix, axis=0)[1]
    b1 = np.sum(np.multiply(matrix[:, 0] - x_mean, matrix[:, 1] - y_mean)) / np.sum((matrix[:, 0] - x_mean) ** 2)
    b0 = y_mean - np.multiply(b1, x_mean)
    return b0, b1


def predict_simple_line_regression(matrix, beta0, beta1):
    y_hat = beta0 + np.multiply(beta1, matrix[:, 0])
    # y_hat = 0 + np.multiply(beta1, matrix[:, 0])
    # y_hat = beta0 + np.zeros((100, 1))
    return y_hat


def calculate_rss(y, prediction):
    error = np.sum((y - prediction) ** 2)
    print(error)


def draw_graph(x, y, prediction):
    plt.plot(x, y, '.', color="red")
    plt.plot(x, prediction, '-', color="green", label="Fitted line")
    plt.show()


def predict_simple_line_regression_using_lstsq(matrix):
    Matrix = np.vstack([matrix[:, 0], np.ones(len(matrix))]).T
    m, c = np.linalg.lstsq(Matrix, matrix[:, 1], rcond=None)[0]
    print("Values generated by build in function lstsq m = {} , c = {}".format(m, c))
    newPrediction = m * matrix[:, 0] + c
    draw_graph(matrix[:, 0], matrix[:, 1], newPrediction)


def my_own_implementation_of_lstsq(matrix):
    Matrix = np.vstack([matrix[:, 0], np.ones(len(matrix))]).T
    m, c = np.dot(np.dot(np.linalg.inv(np.dot((Matrix.T), Matrix)), Matrix.T), matrix[:, 1])
    print("Values generated by my implementation m = {} , c = {}".format(m, c))


mu = 2  # mean
sigma1, sigma2, sigma3 = [0.01, 0.1, 1]  # standard deviation
shape = (100, 2)  # dimensions of matrix
A, B, C = generate_dataset(mu, shape, sigma1, sigma2, sigma3)

# Using matrix A

b0, b1 = learn_simple_line_regression(A)
prediction = predict_simple_line_regression(A, b0, b1)
calculate_rss(A[:, 1], prediction)
draw_graph(A[:, 0], A[:, 1], prediction)
predict_simple_line_regression_using_lstsq(A)
my_own_implementation_of_lstsq(A)

# Using matrix B
# b0, b1 = learn_simple_line_regression(B)
# prediction = predict_simple_line_regression(B, b0, b1)
# calculate_rss(B[:, 1], prediction)
# draw_graph(B[:, 0], B[:, 1], prediction)
# predict_simple_line_regression_using_lstsq(B)

# Using matrix C
# b0, b1 = learn_simple_line_regression(C)
# prediction = predict_simple_line_regression(C, b0, b1)
# calculate_rss(C[:, 1], prediction)
# draw_graph(C[:, 0], C[:, 1], prediction)
# predict_simple_line_regression_using_lstsq(C)
